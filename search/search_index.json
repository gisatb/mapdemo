{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mapdemo","text":"<p>A python package used for web map application</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://gisatb.github.io/mapdemo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#mapdemo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>mapdemo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#mapdemo.common.random_number","title":"<code>random_number()</code>","text":"<p>Return a random number between 0 and 1.</p> <p>Returns:</p> Type Description <code>float</code> <p>A random number between 0 and 1.</p> Source code in <code>mapdemo/common.py</code> <pre><code>def random_number():\n    \"\"\"Return a random number between 0 and 1.\n\n    Returns:\n        float: A random number between 0 and 1.\n    \"\"\"\n    import random\n    return random.random()    \n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/gisatb/mapdemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>mapdemo could always use more documentation, whether as part of the official mapdemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/gisatb/mapdemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up mapdemo for local development.</p> <ol> <li> <p>Fork the mapdemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/mapdemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv mapdemo\n$ cd mapdemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 mapdemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/gisatb/mapdemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install mapdemo, run this command in your terminal:</p> <pre><code>pip install mapdemo\n</code></pre> <p>This is the preferred method to install mapdemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install mapdemo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/gisatb/mapdemo\n</code></pre>"},{"location":"mapdemo/","title":"mapdemo module","text":"<p>Main module.</p>"},{"location":"mapdemo/#mapdemo.mapdemo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>mapdemo/mapdemo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"    \n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"        \n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"Add a layer to the map\n\n        Args:\n            url (_type_): url of the layer\n            name (_type_): Name of the layer added to the layer\n        \"\"\"        \n        layer = ipyleaflet.Tilelayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_basemap(self, name,**kwargs):\n        \"\"\"Adds a basemap to the current map\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object\n\n        Raises:\n            ValueError: Basemap not found\n        \"\"\"\n        #if isinstance(name, str):\n        #   url=eval(f\"basemaps.{name}\").build_url()\n        #   self.add_tile(url, name)\n        #else:\n        #   self.add(name)\n        if isinstance(name, str):\n            try:\n                provider = basemaps\n                for part in name.split(\".\"):\n                    provider = getattr(provider, part)\n\n                url = provider.build_url()\n                attribution = provider.attribution\n\n                # Add the provider as a TileLayer\n                layer = TileLayer(url=url, name=name,attribution=attribution, **kwargs)\n                self.add(layer)\n            except Exception as e:\n                raise ValueError(f\"Basemap '{name}' not found: {e}\")        \n        else:\n            self.add(name)\n\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layer control to the map\n\n        Args:\n            position (str, optional): The position of the layer control. Defaults to \"topright\".\n        \"\"\"        \n        self.add_control(ipyleaflet.LayersControl(position=position))  \n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map\n\n        Args:\n            data (str, dict): GeoJSON Data as a string or a dictionary\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs['style'] = {'color':'blue','weight':1,'fillOpacity':0}\n\n        if \"hover_style\"  not in kwargs:\n            kwargs[\"hover_style\"] =  {'fillColor': 'blue', 'fillOpacity': 0.5} \n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"Adds a shapefile to the map\n\n        Args:\n            data (shp): Shapefile data as a shp\n            name (str, optional): THe name of shapefile . Defaults to \"shp\".\n        \"\"\"        \n        import shapely#shapefile\n        import json \n\n        if isinstance(data, str):\n            with shapely.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        #if \"style\" not in kwargs:\n           # kwargs['style'] = {'color':'blue','weight':1,'fillOpacity':0}\n\n       # if \"hover_style\"  not in kwargs:\n           # kwargs[\"hover_style\"] =  {'fillColor': 'blue', 'fillOpacity': 0.5} \n\n        #layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        #self.add(layer)\n        self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"        \n    super().__init__(center=center, zoom=zoom, **kwargs)\n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.add_basemap","title":"<code>add_basemap(self, name, **kwargs)</code>","text":"<p>Adds a basemap to the current map</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>Basemap not found</p> Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def add_basemap(self, name,**kwargs):\n    \"\"\"Adds a basemap to the current map\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object\n\n    Raises:\n        ValueError: Basemap not found\n    \"\"\"\n    #if isinstance(name, str):\n    #   url=eval(f\"basemaps.{name}\").build_url()\n    #   self.add_tile(url, name)\n    #else:\n    #   self.add(name)\n    if isinstance(name, str):\n        try:\n            provider = basemaps\n            for part in name.split(\".\"):\n                provider = getattr(provider, part)\n\n            url = provider.build_url()\n            attribution = provider.attribution\n\n            # Add the provider as a TileLayer\n            layer = TileLayer(url=url, name=name,attribution=attribution, **kwargs)\n            self.add(layer)\n        except Exception as e:\n            raise ValueError(f\"Basemap '{name}' not found: {e}\")        \n    else:\n        self.add(name)\n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>GeoJSON Data as a string or a dictionary</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map\n\n    Args:\n        data (str, dict): GeoJSON Data as a string or a dictionary\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs['style'] = {'color':'blue','weight':1,'fillOpacity':0}\n\n    if \"hover_style\"  not in kwargs:\n        kwargs[\"hover_style\"] =  {'fillColor': 'blue', 'fillOpacity': 0.5} \n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layer control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layer control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layer control to the map\n\n    Args:\n        position (str, optional): The position of the layer control. Defaults to \"topright\".\n    \"\"\"        \n    self.add_control(ipyleaflet.LayersControl(position=position))  \n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>shp</code> <p>Shapefile data as a shp</p> required <code>name</code> <code>str</code> <p>THe name of shapefile . Defaults to \"shp\".</p> <code>'shp'</code> Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"Adds a shapefile to the map\n\n    Args:\n        data (shp): Shapefile data as a shp\n        name (str, optional): THe name of shapefile . Defaults to \"shp\".\n    \"\"\"        \n    import shapely#shapefile\n    import json \n\n    if isinstance(data, str):\n        with shapely.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    #if \"style\" not in kwargs:\n       # kwargs['style'] = {'color':'blue','weight':1,'fillOpacity':0}\n\n   # if \"hover_style\"  not in kwargs:\n       # kwargs[\"hover_style\"] =  {'fillColor': 'blue', 'fillOpacity': 0.5} \n\n    #layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    #self.add(layer)\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"mapdemo/#mapdemo.mapdemo.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Add a layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>url of the layer</p> required <code>name</code> <code>_type_</code> <p>Name of the layer added to the layer</p> required Source code in <code>mapdemo/mapdemo.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"Add a layer to the map\n\n    Args:\n        url (_type_): url of the layer\n        name (_type_): Name of the layer added to the layer\n    \"\"\"        \n    layer = ipyleaflet.Tilelayer(url=url, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use mapdemo in a project:</p> <pre><code>import mapdemo\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that cintain utility functions from the mapdemo package</p>"},{"location":"utils/#mapdemo.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a csv file to a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path of the csv file</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas Dataframe</p> Source code in <code>mapdemo/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a csv file to a pandas DataFrame.\n\n    Args:\n        csv_file (str): The path of the csv file\n\n    Returns:\n        pandas.DataFrame: The pandas Dataframe\n    \"\"\"\n    import pandas as pd\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import mapdemo\n</pre> import mapdemo In\u00a0[2]: Copied! <pre>from mapdemo import utils\n</pre> from mapdemo import utils In\u00a0[3]: Copied! <pre>csv=\"https://github.com/opengeos/datasets/releases/download/us/us_states.csv \"\ndf=utils.csv_to_df(csv)\ndf\n</pre> csv=\"https://github.com/opengeos/datasets/releases/download/us/us_states.csv \" df=utils.csv_to_df(csv) df Out[3]: id name 0 AL Alabama 1 AK Alaska 2 AZ Arizona 3 AR Arkansas 4 CA California 5 CO Colorado 6 CT Connecticut 7 DE Delaware 8 FL Florida 9 GA Georgia 10 HI Hawaii 11 ID Idaho 12 IL Illinois 13 IN Indiana 14 IA Iowa 15 KS Kansas 16 KY Kentucky 17 LA Louisiana 18 ME Maine 19 MD Maryland 20 MA Massachusetts 21 MI Michigan 22 MN Minnesota 23 MS Mississippi 24 MO Missouri 25 MT Montana 26 NE Nebraska 27 NV Nevada 28 NH New Hampshire 29 NJ New Jersey 30 NM New Mexico 31 NY New York 32 NC North Carolina 33 ND North Dakota 34 OH Ohio 35 OK Oklahoma 36 OR Oregon 37 PA Pennsylvania 38 RI Rhode Island 39 SC South Carolina 40 SD South Dakota 41 TN Tennessee 42 TX Texas 43 UT Utah 44 VT Vermont 45 VA Virginia 46 WA Washington 47 WV West Virginia 48 WI Wisconsin 49 WY Wyoming 50 DC District of Columbia"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import mapdemo\n</pre> import mapdemo In\u00a0[2]: Copied! <pre>from ipyleaflet import basemaps\n</pre> from ipyleaflet import basemaps In\u00a0[3]: Copied! <pre>url =eval(\"basemaps.OpenTopoMap\").build_url()\n</pre> url =eval(\"basemaps.OpenTopoMap\").build_url() In\u00a0[4]: Copied! <pre>m = mapdemo.Map()\nm.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\")\nm\n</pre> m = mapdemo.Map() m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\") m Out[4]:"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre>import json\n\nfrom ipyleaflet import Map, GeoJSON\n\nwith open(\"file.geojson\", 'r') as f:\n    data = json.load(f)\n\nm = Map(center=(50.6252978589571, 0.345809993652344), zoom=3)\n\ngeo_json =GeoJSON(\n    data=data,\n)\nm.add(geo_json)\n\nm\n</pre> import json  from ipyleaflet import Map, GeoJSON  with open(\"file.geojson\", 'r') as f:     data = json.load(f)  m = Map(center=(50.6252978589571, 0.345809993652344), zoom=3)  geo_json =GeoJSON(     data=data, ) m.add(geo_json)  m Out[1]: In\u00a0[2]: Copied! <pre>import mapdemo\n</pre> import mapdemo In\u00a0[3]: Copied! <pre>m=mapdemo.Map()\nm.add_geojson(\"file.geojson\")\n</pre> m=mapdemo.Map() m.add_geojson(\"file.geojson\") In\u00a0[4]: Copied! <pre>style={\n    'opacity':1, 'dashArray':\"9\", 'fillOpacity':0.1, 'weight': 1\n}\nhover_style={\n    'color': 'blue','dashArray': '0', 'fillOpacity': 0.5\n}\n\nm.add_geojson('file.geojson',name='counrties',style=style,hover_style=hover_style)\nm.add_layers_control()\nm\n</pre> style={     'opacity':1, 'dashArray':\"9\", 'fillOpacity':0.1, 'weight': 1 } hover_style={     'color': 'blue','dashArray': '0', 'fillOpacity': 0.5 }  m.add_geojson('file.geojson',name='counrties',style=style,hover_style=hover_style) m.add_layers_control() m Out[4]:"}]}